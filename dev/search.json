[{"path":[]},{"path":"https://forcats.tidyverse.org/dev/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://forcats.tidyverse.org/dev/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://forcats.tidyverse.org/dev/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://forcats.tidyverse.org/dev/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://forcats.tidyverse.org/dev/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement codeofconduct@posit.co. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://forcats.tidyverse.org/dev/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://forcats.tidyverse.org/dev/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://forcats.tidyverse.org/dev/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://forcats.tidyverse.org/dev/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://forcats.tidyverse.org/dev/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://forcats.tidyverse.org/dev/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://forcats.tidyverse.org/dev/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to forcats","title":"Contributing to forcats","text":"outlines propose change forcats. detailed info contributing , tidyverse packages, please see development contributing guide.","code":""},{"path":"https://forcats.tidyverse.org/dev/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to forcats","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"https://forcats.tidyverse.org/dev/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to forcats","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed).","code":""},{"path":"https://forcats.tidyverse.org/dev/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to forcats","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"batpigandme/forcats\", fork = TRUE). Install development dependences devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first header). Follow style described https://style.tidyverse.org/news.html.","code":""},{"path":"https://forcats.tidyverse.org/dev/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to forcats","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"https://forcats.tidyverse.org/dev/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to forcats","text":"Please note forcats project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://forcats.tidyverse.org/dev/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 forcats authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://forcats.tidyverse.org/dev/SUPPORT.html","id":null,"dir":"","previous_headings":"","what":"Getting help with forcats","title":"Getting help with forcats","text":"Thanks using forcats! filing issue, places explore pieces put together make process smooth possible.","code":""},{"path":"https://forcats.tidyverse.org/dev/SUPPORT.html","id":"make-a-reprex","dir":"","previous_headings":"","what":"Make a reprex","title":"Getting help with forcats","text":"Start making minimal reproducible example using reprex package. haven’t heard used reprex , ’re treat! Seriously, reprex make R-question-asking endeavors easier (pretty insane ROI five ten minutes ’ll take learn ’s ). additional reprex pointers, check Get help! section tidyverse site.","code":""},{"path":"https://forcats.tidyverse.org/dev/SUPPORT.html","id":"where-to-ask","dir":"","previous_headings":"","what":"Where to ask?","title":"Getting help with forcats","text":"Armed reprex, next step figure ask. ’s question: start community.rstudio.com, /StackOverflow. people answer questions. ’s bug: ’re right place, file issue. ’re sure: let community help figure ! problem bug feature request, can easily return report . opening new issue, sure search issues pull requests make sure bug hasn’t reported /already fixed development version. default, search pre-populated :issue :open. can edit qualifiers (e.g. :pr, :closed) needed. example, ’d simply remove :open search issues repo, open closed.","code":""},{"path":"https://forcats.tidyverse.org/dev/SUPPORT.html","id":"what-happens-next","dir":"","previous_headings":"","what":"What happens next?","title":"Getting help with forcats","text":"efficient possible, development tidyverse packages tends bursty, shouldn’t worry don’t get immediate response. Typically don’t look repo sufficient quantity issues accumulates, ’s burst intense activity focus efforts. makes development efficient avoids expensive context switching problems, cost taking longer get back . process makes good reprex particularly important might multiple months initial report start working . can’t reproduce bug, can’t fix !","code":""},{"path":"https://forcats.tidyverse.org/dev/articles/forcats.html","id":"ordering-by-frequency","dir":"Articles","previous_headings":"","what":"Ordering by frequency","title":"Introduction to forcats","text":"Let’s try answering question, “common hair colors star wars characters?” Let’s start making bar plot:  ’s okay, helpful graph ordered count. case unordered categorical variable want ordered frequency. , can use function fct_infreq():  Note fct_infreq() automatically puts NA top, even though doesn’t smallest number entries. ’s little surprising NA bar isn’t ordered frequency. understand need make brief digression discuss NAs values vs. NAs levels","code":"library(dplyr) library(ggplot2) library(forcats) ggplot(starwars, aes(y = hair_color)) +    geom_bar() ggplot(starwars, aes(y = fct_infreq(hair_color))) +    geom_bar()"},{"path":"https://forcats.tidyverse.org/dev/articles/forcats.html","id":"nas-in-levels-and-values","dir":"Articles","previous_headings":"","what":"NAs in levels and values","title":"Introduction to forcats","text":"two ways represent missing value factor: can include values factor; appear levels .na() reports missing. missing values encoded factor default: can include levels factor .na() report missing. requires little work create, , default, factor() uses exclude = NA, meaning missing values included levels. can force NA included setting exclude = NULL: NAs values tend best data analysis, since .na() works ’d expect. NAs levels can useful display need control appear table plot. fix issue , can use fct_na_value_to_level() convert NA value NA levels. appear ’d expect:  (need opposite operation, can use fct_na_level_to_value().)","code":"f <- factor(c(\"x\", \"y\", NA)) levels(f) #> [1] \"x\" \"y\" is.na(f) #> [1] FALSE FALSE  TRUE f <- factor(c(\"x\", \"y\", NA), exclude = NULL) levels(f) #> [1] \"x\" \"y\" NA is.na(f) #> [1] FALSE FALSE FALSE ggplot(starwars, aes(y = fct_infreq(fct_na_value_to_level(hair_color)))) +    geom_bar() +    labs(y = \"Hair color\")"},{"path":"https://forcats.tidyverse.org/dev/articles/forcats.html","id":"combining-levels","dir":"Articles","previous_headings":"","what":"Combining levels","title":"Introduction to forcats","text":"Let’s take look skin color now: see ’s 31 different skin colors - want make plot way many display! Let’s reduce top 5. can use fct_lump() “lump” infrequent colors one factor, “.” argument n number levels want keep. also used prop instead, keeps levels appear least prop time. example, let’s keep skin colors least 10% characters : light fair remain; everything else . wanted call something “”, can change argument other_level: wanted see average mass differed eye color? ’ll look 6 popular eye colors remove NAs.","code":"starwars %>%   count(skin_color, sort = TRUE) #> # A tibble: 31 × 2 #>    skin_color     n #>    <chr>      <int> #>  1 fair          17 #>  2 light         11 #>  3 dark           6 #>  4 green          6 #>  5 grey           6 #>  6 pale           5 #>  7 brown          4 #>  8 blue           2 #>  9 blue, grey     2 #> 10 none           2 #> # ℹ 21 more rows starwars %>%   mutate(skin_color = fct_lump(skin_color, n = 5)) %>%   count(skin_color, sort = TRUE) #> # A tibble: 6 × 2 #>   skin_color     n #>   <fct>      <int> #> 1 Other         41 #> 2 fair          17 #> 3 light         11 #> 4 dark           6 #> 5 green          6 #> 6 grey           6 starwars %>%   mutate(skin_color = fct_lump(skin_color, prop = .1)) %>%   count(skin_color, sort = TRUE) #> # A tibble: 3 × 2 #>   skin_color     n #>   <fct>      <int> #> 1 Other         59 #> 2 fair          17 #> 3 light         11 starwars %>%   mutate(skin_color = fct_lump(skin_color, prop = .1, other_level = \"extra\")) %>%   count(skin_color, sort = TRUE) #> # A tibble: 3 × 2 #>   skin_color     n #>   <fct>      <int> #> 1 extra         59 #> 2 fair          17 #> 3 light         11 avg_mass_eye_color <- starwars %>%   mutate(eye_color = fct_lump(eye_color, n = 6)) %>%   group_by(eye_color) %>%   summarise(mean_mass = mean(mass, na.rm = TRUE))  avg_mass_eye_color #> # A tibble: 7 × 2 #>   eye_color mean_mass #>   <fct>         <dbl> #> 1 black          76.3 #> 2 blue           86.5 #> 3 brown          66.1 #> 4 orange        282.  #> 5 red            81.4 #> 6 yellow         81.1 #> 7 Other          68.4"},{"path":"https://forcats.tidyverse.org/dev/articles/forcats.html","id":"ordering-by-another-variable","dir":"Articles","previous_headings":"","what":"Ordering by another variable","title":"Introduction to forcats","text":"looks like people (least one person) orange eyes definitely heavier! wanted make graph, nice ordered mean_mass. can fct_reorder(), reorders one variable another.","code":"avg_mass_eye_color %>%   mutate(eye_color = fct_reorder(eye_color, mean_mass)) %>%   ggplot(aes(x = eye_color, y = mean_mass)) +    geom_col()"},{"path":"https://forcats.tidyverse.org/dev/articles/forcats.html","id":"manually-reordering","dir":"Articles","previous_headings":"","what":"Manually reordering","title":"Introduction to forcats","text":"Let’s switch using another dataset, gss_cat, general social survey. income distribution among respondents? Notice income levels correct order - start non-answers go highest lowest. order ’d see plotted bar chart. coincidence. ’re working ordinal data, order, can ordered factor. can examine base function levels(), prints order: factor came wrong order? Let’s simulate reordering levels rincome randomly fct_shuffle(): Now plotted , show order, place! can fix put right order? can use function fct_relevel() need manually reorder factor levels. addition factor, give character vector level names, specify want move . defaults moving front, can move another level argument . want move end, set equal Inf. example, let’s say wanted move Lt $1000 $1000 2999 front. write: want move second third place?","code":"gss_cat %>%   count(rincome) #> # A tibble: 16 × 2 #>    rincome            n #>    <fct>          <int> #>  1 No answer        183 #>  2 Don't know       267 #>  3 Refused          975 #>  4 $25000 or more  7363 #>  5 $20000 - 24999  1283 #>  6 $15000 - 19999  1048 #>  7 $10000 - 14999  1168 #>  8 $8000 to 9999    340 #>  9 $7000 to 7999    188 #> 10 $6000 to 6999    215 #> 11 $5000 to 5999    227 #> 12 $4000 to 4999    226 #> 13 $3000 to 3999    276 #> 14 $1000 to 2999    395 #> 15 Lt $1000         286 #> 16 Not applicable  7043 levels(gss_cat$rincome) #>  [1] \"No answer\"      \"Don't know\"     \"Refused\"        #>  [4] \"$25000 or more\" \"$20000 - 24999\" \"$15000 - 19999\" #>  [7] \"$10000 - 14999\" \"$8000 to 9999\"  \"$7000 to 7999\"  #> [10] \"$6000 to 6999\"  \"$5000 to 5999\"  \"$4000 to 4999\"  #> [13] \"$3000 to 3999\"  \"$1000 to 2999\"  \"Lt $1000\"       #> [16] \"Not applicable\" reshuffled_income <- gss_cat$rincome %>%   fct_shuffle()  levels(reshuffled_income) #>  [1] \"$3000 to 3999\"  \"$10000 - 14999\" \"$4000 to 4999\"  #>  [4] \"$20000 - 24999\" \"$15000 - 19999\" \"$25000 or more\" #>  [7] \"$1000 to 2999\"  \"$7000 to 7999\"  \"Not applicable\" #> [10] \"$8000 to 9999\"  \"Lt $1000\"       \"Don't know\"     #> [13] \"$6000 to 6999\"  \"Refused\"        \"No answer\"      #> [16] \"$5000 to 5999\" fct_relevel(reshuffled_income, c(\"Lt $1000\", \"$1000 to 2999\")) %>%   levels() #>  [1] \"Lt $1000\"       \"$1000 to 2999\"  \"$3000 to 3999\"  #>  [4] \"$10000 - 14999\" \"$4000 to 4999\"  \"$20000 - 24999\" #>  [7] \"$15000 - 19999\" \"$25000 or more\" \"$7000 to 7999\"  #> [10] \"Not applicable\" \"$8000 to 9999\"  \"Don't know\"     #> [13] \"$6000 to 6999\"  \"Refused\"        \"No answer\"      #> [16] \"$5000 to 5999\" fct_relevel(reshuffled_income, c(\"Lt $1000\", \"$1000 to 2999\"), after = 1) %>%   levels() #>  [1] \"$3000 to 3999\"  \"Lt $1000\"       \"$1000 to 2999\"  #>  [4] \"$10000 - 14999\" \"$4000 to 4999\"  \"$20000 - 24999\" #>  [7] \"$15000 - 19999\" \"$25000 or more\" \"$7000 to 7999\"  #> [10] \"Not applicable\" \"$8000 to 9999\"  \"Don't know\"     #> [13] \"$6000 to 6999\"  \"Refused\"        \"No answer\"      #> [16] \"$5000 to 5999\""},{"path":"https://forcats.tidyverse.org/dev/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Hadley Wickham. Author, maintainer. . Copyright holder, funder.","code":""},{"path":"https://forcats.tidyverse.org/dev/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Wickham H (2025). forcats: Tools Working Categorical Variables (Factors). R package version 1.0.0.9000, https://forcats.tidyverse.org/.","code":"@Manual{,   title = {forcats: Tools for Working with Categorical Variables (Factors)},   author = {Hadley Wickham},   year = {2025},   note = {R package version 1.0.0.9000},   url = {https://forcats.tidyverse.org/}, }"},{"path":[]},{"path":"https://forcats.tidyverse.org/dev/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Tools for Working with Categorical Variables (Factors)","text":"R uses factors handle categorical variables, variables fixed known set possible values. Factors also helpful reordering character vectors improve display. goal forcats package provide suite tools solve common problems factors, including changing order levels values. examples include: fct_reorder(): Reordering factor another variable. fct_infreq(): Reordering factor frequency values. fct_relevel(): Changing order factor hand. fct_lump(): Collapsing least/frequent values factor “”. can learn vignette(\"forcats\"). ’re new factors, best place start chapter factors R Data Science.","code":""},{"path":"https://forcats.tidyverse.org/dev/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Tools for Working with Categorical Variables (Factors)","text":"","code":"# The easiest way to get forcats is to install the whole tidyverse: install.packages(\"tidyverse\")  # Alternatively, install just forcats: install.packages(\"forcats\")  # Or the the development version from GitHub: # install.packages(\"pak\") pak::pak(\"tidyverse/forcats\")"},{"path":[]},{"path":"https://forcats.tidyverse.org/dev/index.html","id":"getting-started","dir":"","previous_headings":"","what":"Getting started","title":"Tools for Working with Categorical Variables (Factors)","text":"forcats part core tidyverse, can load library(tidyverse) library(forcats).","code":"library(forcats) library(dplyr) library(ggplot2) starwars %>%    filter(!is.na(species)) %>%   count(species, sort = TRUE) #> # A tibble: 37 × 2 #>    species      n #>    <chr>    <int> #>  1 Human       35 #>  2 Droid        6 #>  3 Gungan       3 #>  4 Kaminoan     2 #>  5 Mirialan     2 #>  6 Twi'lek      2 #>  7 Wookiee      2 #>  8 Zabrak       2 #>  9 Aleena       1 #> 10 Besalisk     1 #> # ℹ 27 more rows starwars %>%   filter(!is.na(species)) %>%   mutate(species = fct_lump(species, n = 3)) %>%   count(species) #> # A tibble: 4 × 2 #>   species     n #>   <fct>   <int> #> 1 Droid       6 #> 2 Gungan      3 #> 3 Human      35 #> 4 Other      39 ggplot(starwars, aes(x = eye_color)) +    geom_bar() +    coord_flip() starwars %>%   mutate(eye_color = fct_infreq(eye_color)) %>%   ggplot(aes(x = eye_color)) +    geom_bar() +    coord_flip()"},{"path":"https://forcats.tidyverse.org/dev/index.html","id":"more-resources","dir":"","previous_headings":"","what":"More resources","title":"Tools for Working with Categorical Variables (Factors)","text":"history factors, recommend stringsAsFactors: unauthorized biography Roger Peng stringsAsFactors = <sigh> Thomas Lumley. want learn approaches working factors categorical data, recommend Wrangling categorical data R, Amelia McNamara Nicholas Horton.","code":""},{"path":"https://forcats.tidyverse.org/dev/index.html","id":"getting-help","dir":"","previous_headings":"","what":"Getting help","title":"Tools for Working with Categorical Variables (Factors)","text":"encounter clear bug, please file minimal reproducible example Github. questions discussion, please use community.rstudio.com.","code":""},{"path":"https://forcats.tidyverse.org/dev/reference/as_factor.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert input to a factor — as_factor","title":"Convert input to a factor — as_factor","text":"Compared base R, x character, function creates levels order appear, every platform. (Base R sorts current locale can vary place place.) x numeric, ordering based numeric value consistent base R.","code":""},{"path":"https://forcats.tidyverse.org/dev/reference/as_factor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert input to a factor — as_factor","text":"","code":"as_factor(x, ...)  # S3 method for class 'factor' as_factor(x, ...)  # S3 method for class 'character' as_factor(x, ...)  # S3 method for class 'numeric' as_factor(x, ...)  # S3 method for class 'logical' as_factor(x, ...)"},{"path":"https://forcats.tidyverse.org/dev/reference/as_factor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert input to a factor — as_factor","text":"x Object coerce factor. ... arguments passed method.","code":""},{"path":"https://forcats.tidyverse.org/dev/reference/as_factor.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert input to a factor — as_factor","text":"generic function.","code":""},{"path":"https://forcats.tidyverse.org/dev/reference/as_factor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert input to a factor — as_factor","text":"","code":"# Character object x <- c(\"a\", \"z\", \"g\") as_factor(x) #> [1] a z g #> Levels: a z g as.factor(x) #> [1] a z g #> Levels: a g z  # Character object containing numbers y <- c(\"1.1\", \"11\", \"2.2\", \"22\") as_factor(y) #> [1] 1.1 11  2.2 22  #> Levels: 1.1 11 2.2 22 as.factor(y) #> [1] 1.1 11  2.2 22  #> Levels: 1.1 11 2.2 22  # Numeric object z <- as.numeric(y) as_factor(z) #> [1] 1.1 11  2.2 22  #> Levels: 1.1 2.2 11 22 as.factor(z) #> [1] 1.1 11  2.2 22  #> Levels: 1.1 2.2 11 22"},{"path":"https://forcats.tidyverse.org/dev/reference/fct.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a factor — fct","title":"Create a factor — fct","text":"fct() stricter version factor() errors specification levels inconsistent values x.","code":""},{"path":"https://forcats.tidyverse.org/dev/reference/fct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a factor — fct","text":"","code":"fct(x = character(), levels = NULL, na = character())"},{"path":"https://forcats.tidyverse.org/dev/reference/fct.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a factor — fct","text":"x character vector. Values must occur either levels na. levels character vector known levels. supplied, computed unique values x, order occur. na character vector values become missing values.","code":""},{"path":"https://forcats.tidyverse.org/dev/reference/fct.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a factor — fct","text":"factor.","code":""},{"path":"https://forcats.tidyverse.org/dev/reference/fct.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a factor — fct","text":"","code":"# Use factors when you know the set of possible values a variable might take x <- c(\"A\", \"O\", \"O\", \"AB\", \"A\") fct(x, levels = c(\"O\", \"A\", \"B\", \"AB\")) #> [1] A  O  O  AB A  #> Levels: O A B AB  # If you don't specify the levels, fct will create from the data # in the order that they're seen fct(x) #> [1] A  O  O  AB A  #> Levels: A O AB   # Differences with base R ----------------------------------------------- # factor() silently generates NAs x <- c(\"a\", \"b\", \"c\") factor(x, levels = c(\"a\", \"b\")) #> [1] a    b    <NA> #> Levels: a b # fct() errors try(fct(x, levels = c(\"a\", \"b\"))) #> Error in fct(x, levels = c(\"a\", \"b\")) :  #>   All values of `x` must appear in `levels` or `na` #> ℹ Missing level: \"c\" # Unless you explicitly supply NA: fct(x, levels = c(\"a\", \"b\"), na = \"c\") #> [1] a    b    <NA> #> Levels: a b  # factor() sorts default levels: factor(c(\"y\", \"x\")) #> [1] y x #> Levels: x y # fct() uses in order of appearance: fct(c(\"y\", \"x\")) #> [1] y x #> Levels: y x"},{"path":"https://forcats.tidyverse.org/dev/reference/fct_anon.html","id":null,"dir":"Reference","previous_headings":"","what":"Anonymise factor levels — fct_anon","title":"Anonymise factor levels — fct_anon","text":"Replaces factor levels arbitrary numeric identifiers. Neither values order levels preserved.","code":""},{"path":"https://forcats.tidyverse.org/dev/reference/fct_anon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Anonymise factor levels — fct_anon","text":"","code":"fct_anon(f, prefix = \"\")"},{"path":"https://forcats.tidyverse.org/dev/reference/fct_anon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Anonymise factor levels — fct_anon","text":"f factor. prefix character prefix insert front random labels.","code":""},{"path":"https://forcats.tidyverse.org/dev/reference/fct_anon.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Anonymise factor levels — fct_anon","text":"","code":"gss_cat$relig %>% fct_count() #> # A tibble: 16 × 2 #>    f                           n #>    <fct>                   <int> #>  1 No answer                  93 #>  2 Don't know                 15 #>  3 Inter-nondenominational   109 #>  4 Native american            23 #>  5 Christian                 689 #>  6 Orthodox-christian         95 #>  7 Moslem/islam              104 #>  8 Other eastern              32 #>  9 Hinduism                   71 #> 10 Buddhism                  147 #> 11 Other                     224 #> 12 None                     3523 #> 13 Jewish                    388 #> 14 Catholic                 5124 #> 15 Protestant              10846 #> 16 Not applicable              0 gss_cat$relig %>%   fct_anon() %>%   fct_count() #> # A tibble: 16 × 2 #>    f         n #>    <fct> <int> #>  1 01    10846 #>  2 02      224 #>  3 03     3523 #>  4 04      109 #>  5 05       95 #>  6 06       23 #>  7 07       71 #>  8 08       32 #>  9 09      689 #> 10 10      147 #> 11 11      104 #> 12 12     5124 #> 13 13      388 #> 14 14        0 #> 15 15       93 #> 16 16       15 gss_cat$relig %>%   fct_anon(\"X\") %>%   fct_count() #> # A tibble: 16 × 2 #>    f         n #>    <fct> <int> #>  1 X01    3523 #>  2 X02     109 #>  3 X03     104 #>  4 X04     689 #>  5 X05     224 #>  6 X06      23 #>  7 X07    5124 #>  8 X08       0 #>  9 X09      32 #> 10 X10     147 #> 11 X11     388 #> 12 X12      93 #> 13 X13      15 #> 14 X14      95 #> 15 X15      71 #> 16 X16   10846"},{"path":"https://forcats.tidyverse.org/dev/reference/fct_c.html","id":null,"dir":"Reference","previous_headings":"","what":"Concatenate factors, combining levels — fct_c","title":"Concatenate factors, combining levels — fct_c","text":"useful way patching together factors multiple sources really levels .","code":""},{"path":"https://forcats.tidyverse.org/dev/reference/fct_c.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Concatenate factors, combining levels — fct_c","text":"","code":"fct_c(...)"},{"path":"https://forcats.tidyverse.org/dev/reference/fct_c.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Concatenate factors, combining levels — fct_c","text":"... <dynamic-dots> Individual factors. Uses tidy dots, can splice list factors !!!.","code":""},{"path":"https://forcats.tidyverse.org/dev/reference/fct_c.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Concatenate factors, combining levels — fct_c","text":"","code":"fa <- factor(\"a\") fb <- factor(\"b\") fab <- factor(c(\"a\", \"b\"))  c(fa, fb, fab) #> [1] a b a b #> Levels: a b fct_c(fa, fb, fab) #> [1] a b a b #> Levels: a b  # You can also pass a list of factors with !!! fs <- list(fa, fb, fab) fct_c(!!!fs) #> [1] a b a b #> Levels: a b"},{"path":"https://forcats.tidyverse.org/dev/reference/fct_collapse.html","id":null,"dir":"Reference","previous_headings":"","what":"Collapse factor levels into manually defined groups — fct_collapse","title":"Collapse factor levels into manually defined groups — fct_collapse","text":"Collapse factor levels manually defined groups","code":""},{"path":"https://forcats.tidyverse.org/dev/reference/fct_collapse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Collapse factor levels into manually defined groups — fct_collapse","text":"","code":"fct_collapse(.f, ..., other_level = NULL, group_other = \"DEPRECATED\")"},{"path":"https://forcats.tidyverse.org/dev/reference/fct_collapse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Collapse factor levels into manually defined groups — fct_collapse","text":".f factor (character vector). ... <dynamic-dots> series named character vectors. levels vector replaced name. other_level Value level used \"\" values. Always placed end levels. group_other Deprecated. Replace levels named ... \"\"?","code":""},{"path":"https://forcats.tidyverse.org/dev/reference/fct_collapse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Collapse factor levels into manually defined groups — fct_collapse","text":"","code":"fct_count(gss_cat$partyid) #> # A tibble: 10 × 2 #>    f                      n #>    <fct>              <int> #>  1 No answer            154 #>  2 Don't know             1 #>  3 Other party          393 #>  4 Strong republican   2314 #>  5 Not str republican  3032 #>  6 Ind,near rep        1791 #>  7 Independent         4119 #>  8 Ind,near dem        2499 #>  9 Not str democrat    3690 #> 10 Strong democrat     3490  partyid2 <- fct_collapse(gss_cat$partyid,   missing = c(\"No answer\", \"Don't know\"),   other = \"Other party\",   rep = c(\"Strong republican\", \"Not str republican\"),   ind = c(\"Ind,near rep\", \"Independent\", \"Ind,near dem\"),   dem = c(\"Not str democrat\", \"Strong democrat\") ) fct_count(partyid2) #> # A tibble: 5 × 2 #>   f           n #>   <fct>   <int> #> 1 missing   155 #> 2 other     393 #> 3 rep      5346 #> 4 ind      8409 #> 5 dem      7180"},{"path":"https://forcats.tidyverse.org/dev/reference/fct_count.html","id":null,"dir":"Reference","previous_headings":"","what":"Count entries in a factor — fct_count","title":"Count entries in a factor — fct_count","text":"Count entries factor","code":""},{"path":"https://forcats.tidyverse.org/dev/reference/fct_count.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count entries in a factor — fct_count","text":"","code":"fct_count(f, sort = FALSE, prop = FALSE)"},{"path":"https://forcats.tidyverse.org/dev/reference/fct_count.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count entries in a factor — fct_count","text":"f factor (character vector). sort TRUE, sort result common values float top. prop TRUE, compute fraction marginal table.","code":""},{"path":"https://forcats.tidyverse.org/dev/reference/fct_count.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Count entries in a factor — fct_count","text":"tibble columns f, n p, prop TRUE.","code":""},{"path":"https://forcats.tidyverse.org/dev/reference/fct_count.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Count entries in a factor — fct_count","text":"","code":"f <- factor(sample(letters)[rpois(1000, 10)]) table(f) #> f #>   b   c   e   f   h   j   k   l   m   n   o   q   r   s   t   u   v  #>  11  64 122   2 117  14  25  93  43  51 102   1 107   6  51 132   5  #>   x   z  #>   1  53  fct_count(f) #> # A tibble: 19 × 2 #>    f         n #>    <fct> <int> #>  1 b        11 #>  2 c        64 #>  3 e       122 #>  4 f         2 #>  5 h       117 #>  6 j        14 #>  7 k        25 #>  8 l        93 #>  9 m        43 #> 10 n        51 #> 11 o       102 #> 12 q         1 #> 13 r       107 #> 14 s         6 #> 15 t        51 #> 16 u       132 #> 17 v         5 #> 18 x         1 #> 19 z        53 fct_count(f, sort = TRUE) #> # A tibble: 19 × 2 #>    f         n #>    <fct> <int> #>  1 u       132 #>  2 e       122 #>  3 h       117 #>  4 r       107 #>  5 o       102 #>  6 l        93 #>  7 c        64 #>  8 z        53 #>  9 n        51 #> 10 t        51 #> 11 m        43 #> 12 k        25 #> 13 j        14 #> 14 b        11 #> 15 s         6 #> 16 v         5 #> 17 f         2 #> 18 q         1 #> 19 x         1 fct_count(f, sort = TRUE, prop = TRUE) #> # A tibble: 19 × 3 #>    f         n     p #>    <fct> <int> <dbl> #>  1 u       132 0.132 #>  2 e       122 0.122 #>  3 h       117 0.117 #>  4 r       107 0.107 #>  5 o       102 0.102 #>  6 l        93 0.093 #>  7 c        64 0.064 #>  8 z        53 0.053 #>  9 n        51 0.051 #> 10 t        51 0.051 #> 11 m        43 0.043 #> 12 k        25 0.025 #> 13 j        14 0.014 #> 14 b        11 0.011 #> 15 s         6 0.006 #> 16 v         5 0.005 #> 17 f         2 0.002 #> 18 q         1 0.001 #> 19 x         1 0.001"},{"path":"https://forcats.tidyverse.org/dev/reference/fct_cross.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine levels from two or more factors to create a new factor — fct_cross","title":"Combine levels from two or more factors to create a new factor — fct_cross","text":"Computes factor whose levels combinations levels input factors.","code":""},{"path":"https://forcats.tidyverse.org/dev/reference/fct_cross.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine levels from two or more factors to create a new factor — fct_cross","text":"","code":"fct_cross(..., sep = \":\", keep_empty = FALSE)"},{"path":"https://forcats.tidyverse.org/dev/reference/fct_cross.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine levels from two or more factors to create a new factor — fct_cross","text":"... <dynamic-dots> Additional factors character vectors. sep character string separate levels keep_empty TRUE, keep combinations observations levels","code":""},{"path":"https://forcats.tidyverse.org/dev/reference/fct_cross.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine levels from two or more factors to create a new factor — fct_cross","text":"new factor","code":""},{"path":"https://forcats.tidyverse.org/dev/reference/fct_cross.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combine levels from two or more factors to create a new factor — fct_cross","text":"","code":"fruit <- factor(c(\"apple\", \"kiwi\", \"apple\", \"apple\")) colour <- factor(c(\"green\", \"green\", \"red\", \"green\")) eaten <- c(\"yes\", \"no\", \"yes\", \"no\") fct_cross(fruit, colour) #> [1] apple:green kiwi:green  apple:red   apple:green #> Levels: apple:green kiwi:green apple:red fct_cross(fruit, colour, eaten) #> [1] apple:green:yes kiwi:green:no   apple:red:yes   apple:green:no  #> 4 Levels: apple:green:no kiwi:green:no ... apple:red:yes fct_cross(fruit, colour, keep_empty = TRUE) #> [1] apple:green kiwi:green  apple:red   apple:green #> Levels: apple:green kiwi:green apple:red kiwi:red"},{"path":"https://forcats.tidyverse.org/dev/reference/fct_drop.html","id":null,"dir":"Reference","previous_headings":"","what":"Drop unused levels — fct_drop","title":"Drop unused levels — fct_drop","text":"Compared base::droplevels(), drop NA levels values.","code":""},{"path":"https://forcats.tidyverse.org/dev/reference/fct_drop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Drop unused levels — fct_drop","text":"","code":"fct_drop(f, only = NULL)"},{"path":"https://forcats.tidyverse.org/dev/reference/fct_drop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Drop unused levels — fct_drop","text":"f factor (character vector). character vector restricting set levels dropped. supplied, levels entries appear vector removed.","code":""},{"path":[]},{"path":"https://forcats.tidyverse.org/dev/reference/fct_drop.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Drop unused levels — fct_drop","text":"","code":"f <- factor(c(\"a\", \"b\"), levels = c(\"a\", \"b\", \"c\")) f #> [1] a b #> Levels: a b c fct_drop(f) #> [1] a b #> Levels: a b  # Set only to restrict which levels to drop fct_drop(f, only = \"a\") #> [1] a b #> Levels: a b c fct_drop(f, only = \"c\") #> [1] a b #> Levels: a b"},{"path":"https://forcats.tidyverse.org/dev/reference/fct_expand.html","id":null,"dir":"Reference","previous_headings":"","what":"Add additional levels to a factor — fct_expand","title":"Add additional levels to a factor — fct_expand","text":"Add additional levels factor","code":""},{"path":"https://forcats.tidyverse.org/dev/reference/fct_expand.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add additional levels to a factor — fct_expand","text":"","code":"fct_expand(f, ..., after = Inf)"},{"path":"https://forcats.tidyverse.org/dev/reference/fct_expand.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add additional levels to a factor — fct_expand","text":"f factor (character vector). ... Additional levels add factor. Levels already exist silently ignored. new values placed?","code":""},{"path":[]},{"path":"https://forcats.tidyverse.org/dev/reference/fct_expand.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add additional levels to a factor — fct_expand","text":"","code":"f <- factor(sample(letters[1:3], 20, replace = TRUE)) f #>  [1] b b a b c b b a c a b c b c c c b c b a #> Levels: a b c fct_expand(f, \"d\", \"e\", \"f\") #>  [1] b b a b c b b a c a b c b c c c b c b a #> Levels: a b c d e f fct_expand(f, letters[1:6]) #>  [1] b b a b c b b a c a b c b c c c b c b a #> Levels: a b c d e f fct_expand(f, \"Z\", after = 0) #>  [1] b b a b c b b a c a b c b c c c b c b a #> Levels: Z a b c"},{"path":"https://forcats.tidyverse.org/dev/reference/fct_explicit_na.html","id":null,"dir":"Reference","previous_headings":"","what":"Make missing values explicit — fct_explicit_na","title":"Make missing values explicit — fct_explicit_na","text":"function deprecated terminology confusing; please use fct_na_value_to_level() instead. gives missing values explicit factor level, ensuring appear summaries plots.","code":""},{"path":"https://forcats.tidyverse.org/dev/reference/fct_explicit_na.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make missing values explicit — fct_explicit_na","text":"","code":"fct_explicit_na(f, na_level = \"(Missing)\")"},{"path":"https://forcats.tidyverse.org/dev/reference/fct_explicit_na.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make missing values explicit — fct_explicit_na","text":"f factor (character vector). na_level Level use missing values: NAs changed .","code":""},{"path":"https://forcats.tidyverse.org/dev/reference/fct_explicit_na.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make missing values explicit — fct_explicit_na","text":"","code":"f1 <- factor(c(\"a\", \"a\", NA, NA, \"a\", \"b\", NA, \"c\", \"a\", \"c\", \"b\")) fct_count(f1) #> # A tibble: 4 × 2 #>   f         n #>   <fct> <int> #> 1 a         4 #> 2 b         2 #> 3 c         2 #> 4 NA        3 table(f1) #> f1 #> a b c  #> 4 2 2  sum(is.na(f1)) #> [1] 3  # previously f2 <- fct_explicit_na(f1) #> Warning: `fct_explicit_na()` was deprecated in forcats 1.0.0. #> ℹ Please use `fct_na_value_to_level()` instead. # now f2 <- fct_na_value_to_level(f1)  fct_count(f2) #> # A tibble: 4 × 2 #>   f         n #>   <fct> <int> #> 1 a         4 #> 2 b         2 #> 3 c         2 #> 4 NA        3 table(f2) #> f2 #>    a    b    c <NA>  #>    4    2    2    3  sum(is.na(f2)) #> [1] 0"},{"path":"https://forcats.tidyverse.org/dev/reference/fct_inorder.html","id":null,"dir":"Reference","previous_headings":"","what":"Reorder factor levels by first appearance, frequency, or numeric order — fct_inorder","title":"Reorder factor levels by first appearance, frequency, or numeric order — fct_inorder","text":"family functions changes order levels. fct_inorder(): order first appear. fct_infreq(): number observations level (largest first) fct_inseq(): numeric value level.","code":""},{"path":"https://forcats.tidyverse.org/dev/reference/fct_inorder.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reorder factor levels by first appearance, frequency, or numeric order — fct_inorder","text":"","code":"fct_inorder(f, ordered = NA)  fct_infreq(f, w = NULL, ordered = NA)  fct_inseq(f, ordered = NA)"},{"path":"https://forcats.tidyverse.org/dev/reference/fct_inorder.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reorder factor levels by first appearance, frequency, or numeric order — fct_inorder","text":"f factor ordered logical determines \"ordered\" status output factor. NA preserves existing status factor. w optional numeric vector giving weights frequency value (level) f.","code":""},{"path":"https://forcats.tidyverse.org/dev/reference/fct_inorder.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reorder factor levels by first appearance, frequency, or numeric order — fct_inorder","text":"","code":"f <- factor(c(\"b\", \"b\", \"a\", \"c\", \"c\", \"c\")) f #> [1] b b a c c c #> Levels: a b c fct_inorder(f) #> [1] b b a c c c #> Levels: b a c fct_infreq(f) #> [1] b b a c c c #> Levels: c b a  f <- factor(1:3, levels = c(\"3\", \"2\", \"1\")) f #> [1] 1 2 3 #> Levels: 3 2 1 fct_inseq(f) #> [1] 1 2 3 #> Levels: 1 2 3"},{"path":"https://forcats.tidyverse.org/dev/reference/fct_lump.html","id":null,"dir":"Reference","previous_headings":"","what":"Lump uncommon factor together levels into ","title":"Lump uncommon factor together levels into ","text":"family lumping together levels meet criteria. fct_lump_min(): lumps levels appear fewer min times. fct_lump_prop(): lumps levels appear fewer (equal ) prop * n times. fct_lump_n() lumps levels except n frequent (least frequent n < 0) fct_lump_lowfreq() lumps together least frequent levels, ensuring \"\" still smallest level. fct_lump() exists primarily historical reasons, automatically picks different methods depending arguments. longer recommend use .","code":""},{"path":"https://forcats.tidyverse.org/dev/reference/fct_lump.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lump uncommon factor together levels into ","text":"","code":"fct_lump(   f,   n,   prop,   w = NULL,   other_level = \"Other\",   ties.method = c(\"min\", \"average\", \"first\", \"last\", \"random\", \"max\") )  fct_lump_min(f, min, w = NULL, other_level = \"Other\")  fct_lump_prop(f, prop, w = NULL, other_level = \"Other\")  fct_lump_n(   f,   n,   w = NULL,   other_level = \"Other\",   ties.method = c(\"min\", \"average\", \"first\", \"last\", \"random\", \"max\") )  fct_lump_lowfreq(f, w = NULL, other_level = \"Other\")"},{"path":"https://forcats.tidyverse.org/dev/reference/fct_lump.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lump uncommon factor together levels into ","text":"f factor (character vector). n Positive n preserves common n values. Negative n preserves least common -n values. ties, get least abs(n) values. prop Positive prop lumps values appear least prop time. Negative prop lumps values appear -prop time. w optional numeric vector giving weights frequency value (level) f. other_level Value level used \"\" values. Always placed end levels. ties.method character string specifying ties treated. See rank() details. min Preserve levels appear least min number times.","code":""},{"path":[]},{"path":"https://forcats.tidyverse.org/dev/reference/fct_lump.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Lump uncommon factor together levels into ","text":"","code":"x <- factor(rep(LETTERS[1:9], times = c(40, 10, 5, 27, 1, 1, 1, 1, 1))) x %>% table() #> . #>  A  B  C  D  E  F  G  H  I  #> 40 10  5 27  1  1  1  1  1  x %>%   fct_lump_n(3) %>%   table() #> . #>     A     B     D Other  #>    40    10    27    10  x %>%   fct_lump_prop(0.10) %>%   table() #> . #>     A     B     D Other  #>    40    10    27    10  x %>%   fct_lump_min(5) %>%   table() #> . #>     A     B     C     D Other  #>    40    10     5    27     5  x %>%   fct_lump_lowfreq() %>%   table() #> . #>     A     D Other  #>    40    27    20   x <- factor(letters[rpois(100, 5)]) x #>   [1] d f f e d d d c h f d g h f f d c b b f c h h e h h c f e f d b e #>  [34] c b f e c h d b f e e f d c g f g d d e c a b d c g e f d f f g g #>  [67] e c f b g g b g e g i e d g g d c d i d c b d c d d f f d e d h d #> [100] d #> Levels: a b c d e f g h i table(x) #> x #>  a  b  c  d  e  f  g  h  i  #>  1  9 13 24 13 18 12  8  2  table(fct_lump_lowfreq(x)) #>  #>     b     c     d     e     f     g     h Other  #>     9    13    24    13    18    12     8     3   # Use positive values to collapse the rarest fct_lump_n(x, n = 3) #>   [1] d     f     f     e     d     d     d     c     Other f     d     #>  [12] Other Other f     f     d     c     Other Other f     c     Other #>  [23] Other e     Other Other c     f     e     f     d     Other e     #>  [34] c     Other f     e     c     Other d     Other f     e     e     #>  [45] f     d     c     Other f     Other d     d     e     c     Other #>  [56] Other d     c     Other e     f     d     f     f     Other Other #>  [67] e     c     f     Other Other Other Other Other e     Other Other #>  [78] e     d     Other Other d     c     d     Other d     c     Other #>  [89] d     c     d     d     f     f     d     e     d     Other d     #> [100] d     #> Levels: c d e f Other fct_lump_prop(x, prop = 0.1) #>   [1] d     f     f     e     d     d     d     c     Other f     d     #>  [12] g     Other f     f     d     c     Other Other f     c     Other #>  [23] Other e     Other Other c     f     e     f     d     Other e     #>  [34] c     Other f     e     c     Other d     Other f     e     e     #>  [45] f     d     c     g     f     g     d     d     e     c     Other #>  [56] Other d     c     g     e     f     d     f     f     g     g     #>  [67] e     c     f     Other g     g     Other g     e     g     Other #>  [78] e     d     g     g     d     c     d     Other d     c     Other #>  [89] d     c     d     d     f     f     d     e     d     Other d     #> [100] d     #> Levels: c d e f g Other  # Use negative values to collapse the most common fct_lump_n(x, n = -3) #>   [1] Other Other Other Other Other Other Other Other h     Other Other #>  [12] Other h     Other Other Other Other Other Other Other Other h     #>  [23] h     Other h     h     Other Other Other Other Other Other Other #>  [34] Other Other Other Other Other h     Other Other Other Other Other #>  [45] Other Other Other Other Other Other Other Other Other Other a     #>  [56] Other Other Other Other Other Other Other Other Other Other Other #>  [67] Other Other Other Other Other Other Other Other Other Other i     #>  [78] Other Other Other Other Other Other Other i     Other Other Other #>  [89] Other Other Other Other Other Other Other Other Other h     Other #> [100] Other #> Levels: a h i Other fct_lump_prop(x, prop = -0.1) #>   [1] Other Other Other Other Other Other Other Other h     Other Other #>  [12] Other h     Other Other Other Other b     b     Other Other h     #>  [23] h     Other h     h     Other Other Other Other Other b     Other #>  [34] Other b     Other Other Other h     Other b     Other Other Other #>  [45] Other Other Other Other Other Other Other Other Other Other a     #>  [56] b     Other Other Other Other Other Other Other Other Other Other #>  [67] Other Other Other b     Other Other b     Other Other Other i     #>  [78] Other Other Other Other Other Other Other i     Other Other b     #>  [89] Other Other Other Other Other Other Other Other Other h     Other #> [100] Other #> Levels: a b h i Other  # Use weighted frequencies w <- c(rep(2, 50), rep(1, 50)) fct_lump_n(x, n = 5, w = w) #>   [1] d     f     f     e     d     d     d     c     h     f     d     #>  [12] g     h     f     f     d     c     Other Other f     c     h     #>  [23] h     e     h     h     c     f     e     f     d     Other e     #>  [34] c     Other f     e     c     h     d     Other f     e     e     #>  [45] f     d     c     g     f     g     d     d     e     c     Other #>  [56] Other d     c     g     e     f     d     f     f     g     g     #>  [67] e     c     f     Other g     g     Other g     e     g     Other #>  [78] e     d     g     g     d     c     d     Other d     c     Other #>  [89] d     c     d     d     f     f     d     e     d     h     d     #> [100] d     #> Levels: c d e f g h Other  # Use ties.method to control how tied factors are collapsed fct_lump_n(x, n = 6) #>   [1] d     f     f     e     d     d     d     c     Other f     d     #>  [12] g     Other f     f     d     c     b     b     f     c     Other #>  [23] Other e     Other Other c     f     e     f     d     b     e     #>  [34] c     b     f     e     c     Other d     b     f     e     e     #>  [45] f     d     c     g     f     g     d     d     e     c     Other #>  [56] b     d     c     g     e     f     d     f     f     g     g     #>  [67] e     c     f     b     g     g     b     g     e     g     Other #>  [78] e     d     g     g     d     c     d     Other d     c     b     #>  [89] d     c     d     d     f     f     d     e     d     Other d     #> [100] d     #> Levels: b c d e f g Other fct_lump_n(x, n = 6, ties.method = \"max\") #>   [1] d     f     f     e     d     d     d     c     Other f     d     #>  [12] g     Other f     f     d     c     b     b     f     c     Other #>  [23] Other e     Other Other c     f     e     f     d     b     e     #>  [34] c     b     f     e     c     Other d     b     f     e     e     #>  [45] f     d     c     g     f     g     d     d     e     c     Other #>  [56] b     d     c     g     e     f     d     f     f     g     g     #>  [67] e     c     f     b     g     g     b     g     e     g     Other #>  [78] e     d     g     g     d     c     d     Other d     c     b     #>  [89] d     c     d     d     f     f     d     e     d     Other d     #> [100] d     #> Levels: b c d e f g Other  # Use fct_lump_min() to lump together all levels with fewer than `n` values table(fct_lump_min(x, min = 10)) #>  #>     c     d     e     f     g Other  #>    13    24    13    18    12    20  table(fct_lump_min(x, min = 15)) #>  #>     d     f Other  #>    24    18    58"},{"path":"https://forcats.tidyverse.org/dev/reference/fct_match.html","id":null,"dir":"Reference","previous_headings":"","what":"Test for presence of levels in a factor — fct_match","title":"Test for presence of levels in a factor — fct_match","text":"lvls occur f? Compared %%, function validates lvls ensure actually present f. words, x %% \"present\" return FALSE, fct_match(x, \"present\") throw error.","code":""},{"path":"https://forcats.tidyverse.org/dev/reference/fct_match.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test for presence of levels in a factor — fct_match","text":"","code":"fct_match(f, lvls)"},{"path":"https://forcats.tidyverse.org/dev/reference/fct_match.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test for presence of levels in a factor — fct_match","text":"f factor (character vector). lvls character vector specifying levels look .","code":""},{"path":"https://forcats.tidyverse.org/dev/reference/fct_match.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test for presence of levels in a factor — fct_match","text":"logical vector","code":""},{"path":"https://forcats.tidyverse.org/dev/reference/fct_match.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test for presence of levels in a factor — fct_match","text":"","code":"table(fct_match(gss_cat$marital, c(\"Married\", \"Divorced\"))) #>  #> FALSE  TRUE  #>  7983 13500   # Compare to %in%, misspelled levels throw an error table(gss_cat$marital %in% c(\"Maried\", \"Davorced\")) #>  #> FALSE  #> 21483  if (FALSE) { # \\dontrun{ table(fct_match(gss_cat$marital, c(\"Maried\", \"Davorced\"))) } # }"},{"path":"https://forcats.tidyverse.org/dev/reference/fct_na_value_to_level.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert between NA values and NA levels — fct_na_value_to_level","title":"Convert between NA values and NA levels — fct_na_value_to_level","text":"two ways represent missing values factors: values levels. NAs values useful data analysis (since .na() returns expect), NA explicitly recorded levels, way control position (almost always displayed last ). Putting NAs levels allows control display, cost losing accurate .na() reporting. (possible factor missing values values levels requires explicit gymnastics recommend .)","code":""},{"path":"https://forcats.tidyverse.org/dev/reference/fct_na_value_to_level.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert between NA values and NA levels — fct_na_value_to_level","text":"","code":"fct_na_value_to_level(f, level = NA)  fct_na_level_to_value(f, extra_levels = NULL)"},{"path":"https://forcats.tidyverse.org/dev/reference/fct_na_value_to_level.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert between NA values and NA levels — fct_na_value_to_level","text":"f factor (character vector). level Optionally, instead converting NA values NA level, convert level value. extra_levels Optionally, character vector giving additional levels also converted NA values.","code":""},{"path":"https://forcats.tidyverse.org/dev/reference/fct_na_value_to_level.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert between NA values and NA levels — fct_na_value_to_level","text":"","code":"# Most factors store NAs in the values: f1 <- fct(c(\"a\", \"b\", NA, \"c\", \"b\", NA)) levels(f1) #> [1] \"a\" \"b\" \"c\" as.integer(f1) #> [1]  1  2 NA  3  2 NA is.na(f1) #> [1] FALSE FALSE  TRUE FALSE FALSE  TRUE  # But it's also possible to store them in the levels f2 <- fct_na_value_to_level(f1) levels(f2) #> [1] \"a\" \"b\" \"c\" NA  as.integer(f2) #> [1] 1 2 4 3 2 4 is.na(f2) #> [1] FALSE FALSE FALSE FALSE FALSE FALSE  # If needed, you can convert back to NAs in the values: f3 <- fct_na_level_to_value(f2) levels(f3) #> [1] \"a\" \"b\" \"c\" as.integer(f3) #> [1]  1  2 NA  3  2 NA is.na(f3) #> [1] FALSE FALSE  TRUE FALSE FALSE  TRUE"},{"path":"https://forcats.tidyverse.org/dev/reference/fct_other.html","id":null,"dir":"Reference","previous_headings":"","what":"Manually replace levels with ","title":"Manually replace levels with ","text":"Manually replace levels \"\"","code":""},{"path":"https://forcats.tidyverse.org/dev/reference/fct_other.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Manually replace levels with ","text":"","code":"fct_other(f, keep, drop, other_level = \"Other\")"},{"path":"https://forcats.tidyverse.org/dev/reference/fct_other.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Manually replace levels with ","text":"f factor (character vector). keep, drop Pick one keep drop: keep preserve listed levels, replacing others other_level. drop replace listed levels other_level, keeping . other_level Value level used \"\" values. Always placed end levels.","code":""},{"path":[]},{"path":"https://forcats.tidyverse.org/dev/reference/fct_other.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Manually replace levels with ","text":"","code":"x <- factor(rep(LETTERS[1:9], times = c(40, 10, 5, 27, 1, 1, 1, 1, 1)))  fct_other(x, keep = c(\"A\", \"B\")) #>  [1] A     A     A     A     A     A     A     A     A     A     A     #> [12] A     A     A     A     A     A     A     A     A     A     A     #> [23] A     A     A     A     A     A     A     A     A     A     A     #> [34] A     A     A     A     A     A     A     B     B     B     B     #> [45] B     B     B     B     B     B     Other Other Other Other Other #> [56] Other Other Other Other Other Other Other Other Other Other Other #> [67] Other Other Other Other Other Other Other Other Other Other Other #> [78] Other Other Other Other Other Other Other Other Other Other #> Levels: A B Other fct_other(x, drop = c(\"A\", \"B\")) #>  [1] Other Other Other Other Other Other Other Other Other Other Other #> [12] Other Other Other Other Other Other Other Other Other Other Other #> [23] Other Other Other Other Other Other Other Other Other Other Other #> [34] Other Other Other Other Other Other Other Other Other Other Other #> [45] Other Other Other Other Other Other C     C     C     C     C     #> [56] D     D     D     D     D     D     D     D     D     D     D     #> [67] D     D     D     D     D     D     D     D     D     D     D     #> [78] D     D     D     D     D     E     F     G     H     I     #> Levels: C D E F G H I Other"},{"path":"https://forcats.tidyverse.org/dev/reference/fct_recode.html","id":null,"dir":"Reference","previous_headings":"","what":"Change factor levels by hand — fct_recode","title":"Change factor levels by hand — fct_recode","text":"Change factor levels hand","code":""},{"path":"https://forcats.tidyverse.org/dev/reference/fct_recode.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Change factor levels by hand — fct_recode","text":"","code":"fct_recode(.f, ...)"},{"path":"https://forcats.tidyverse.org/dev/reference/fct_recode.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Change factor levels by hand — fct_recode","text":".f factor (character vector). ... <dynamic-dots> sequence named character vectors name gives new level, value gives old level. Levels otherwise mentioned left . Levels can removed naming NULL.","code":""},{"path":"https://forcats.tidyverse.org/dev/reference/fct_recode.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Change factor levels by hand — fct_recode","text":"","code":"x <- factor(c(\"apple\", \"bear\", \"banana\", \"dear\")) fct_recode(x, fruit = \"apple\", fruit = \"banana\") #> [1] fruit bear  fruit dear  #> Levels: fruit bear dear  # If you make a mistake you'll get a warning fct_recode(x, fruit = \"apple\", fruit = \"bananana\") #> Warning: Unknown levels in `f`: bananana #> [1] fruit  bear   banana dear   #> Levels: fruit banana bear dear  # If you name the level NULL it will be removed fct_recode(x, NULL = \"apple\", fruit = \"banana\") #> [1] <NA>  bear  fruit dear  #> Levels: fruit bear dear  # Wrap the left hand side in quotes if it contains special variables fct_recode(x, \"an apple\" = \"apple\", \"a bear\" = \"bear\") #> [1] an apple a bear   banana   dear     #> Levels: an apple banana a bear dear  # When passing a named vector to rename levels use !!! to splice x <- factor(c(\"apple\", \"bear\", \"banana\", \"dear\")) levels <- c(fruit = \"apple\", fruit = \"banana\") fct_recode(x, !!!levels) #> [1] fruit bear  fruit dear  #> Levels: fruit bear dear"},{"path":"https://forcats.tidyverse.org/dev/reference/fct_relabel.html","id":null,"dir":"Reference","previous_headings":"","what":"Relabel factor levels with a function, collapsing as necessary — fct_relabel","title":"Relabel factor levels with a function, collapsing as necessary — fct_relabel","text":"Relabel factor levels function, collapsing necessary","code":""},{"path":"https://forcats.tidyverse.org/dev/reference/fct_relabel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Relabel factor levels with a function, collapsing as necessary — fct_relabel","text":"","code":"fct_relabel(.f, .fun, ...)"},{"path":"https://forcats.tidyverse.org/dev/reference/fct_relabel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Relabel factor levels with a function, collapsing as necessary — fct_relabel","text":".f factor (character vector). .fun function applied level. Must accept one character argument return character vector length input. can also use ~ create shorthand (style purrr). ~ paste(., \"x\") equivalent function(.) paste(., \"x\") ... Additional arguments fun.","code":""},{"path":"https://forcats.tidyverse.org/dev/reference/fct_relabel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Relabel factor levels with a function, collapsing as necessary — fct_relabel","text":"","code":"gss_cat$partyid %>% fct_count() #> # A tibble: 10 × 2 #>    f                      n #>    <fct>              <int> #>  1 No answer            154 #>  2 Don't know             1 #>  3 Other party          393 #>  4 Strong republican   2314 #>  5 Not str republican  3032 #>  6 Ind,near rep        1791 #>  7 Independent         4119 #>  8 Ind,near dem        2499 #>  9 Not str democrat    3690 #> 10 Strong democrat     3490 gss_cat$partyid %>%   fct_relabel(~ gsub(\",\", \", \", .x)) %>%   fct_count() #> # A tibble: 10 × 2 #>    f                      n #>    <fct>              <int> #>  1 No answer            154 #>  2 Don't know             1 #>  3 Other party          393 #>  4 Strong republican   2314 #>  5 Not str republican  3032 #>  6 Ind, near rep       1791 #>  7 Independent         4119 #>  8 Ind, near dem       2499 #>  9 Not str democrat    3690 #> 10 Strong democrat     3490  convert_income <- function(x) {   regex <- \"^(?:Lt |)[$]([0-9]+).*$\"   is_range <- grepl(regex, x)   num_income <- as.numeric(gsub(regex, \"\\\\1\", x[is_range]))   num_income <- trunc(num_income / 5000) * 5000   x[is_range] <- paste0(\"Gt $\", num_income)   x } fct_count(gss_cat$rincome) #> # A tibble: 16 × 2 #>    f                  n #>    <fct>          <int> #>  1 No answer        183 #>  2 Don't know       267 #>  3 Refused          975 #>  4 $25000 or more  7363 #>  5 $20000 - 24999  1283 #>  6 $15000 - 19999  1048 #>  7 $10000 - 14999  1168 #>  8 $8000 to 9999    340 #>  9 $7000 to 7999    188 #> 10 $6000 to 6999    215 #> 11 $5000 to 5999    227 #> 12 $4000 to 4999    226 #> 13 $3000 to 3999    276 #> 14 $1000 to 2999    395 #> 15 Lt $1000         286 #> 16 Not applicable  7043 convert_income(levels(gss_cat$rincome)) #>  [1] \"No answer\"      \"Don't know\"     \"Refused\"        #>  [4] \"Gt $25000\"      \"Gt $20000\"      \"Gt $15000\"      #>  [7] \"Gt $10000\"      \"Gt $5000\"       \"Gt $5000\"       #> [10] \"Gt $5000\"       \"Gt $5000\"       \"Gt $0\"          #> [13] \"Gt $0\"          \"Gt $0\"          \"Gt $0\"          #> [16] \"Not applicable\" rincome2 <- fct_relabel(gss_cat$rincome, convert_income) fct_count(rincome2) #> # A tibble: 10 × 2 #>    f                  n #>    <fct>          <int> #>  1 No answer        183 #>  2 Don't know       267 #>  3 Refused          975 #>  4 Gt $25000       7363 #>  5 Gt $20000       1283 #>  6 Gt $15000       1048 #>  7 Gt $10000       1168 #>  8 Gt $5000         970 #>  9 Gt $0           1183 #> 10 Not applicable  7043"},{"path":"https://forcats.tidyverse.org/dev/reference/fct_relevel.html","id":null,"dir":"Reference","previous_headings":"","what":"Reorder factor levels by hand — fct_relevel","title":"Reorder factor levels by hand — fct_relevel","text":"generalisation stats::relevel() allows move number levels location.","code":""},{"path":"https://forcats.tidyverse.org/dev/reference/fct_relevel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reorder factor levels by hand — fct_relevel","text":"","code":"fct_relevel(.f, ..., after = 0L)"},{"path":"https://forcats.tidyverse.org/dev/reference/fct_relevel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reorder factor levels by hand — fct_relevel","text":".f factor (character vector). ... Either function (formula), character levels. function called current levels input, return value (must character vector) used relevel factor. levels mentioned left existing order, default explicitly mentioned levels. Supports tidy dots. new values placed?","code":""},{"path":"https://forcats.tidyverse.org/dev/reference/fct_relevel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reorder factor levels by hand — fct_relevel","text":"","code":"f <- factor(c(\"a\", \"b\", \"c\", \"d\"), levels = c(\"b\", \"c\", \"d\", \"a\")) fct_relevel(f) #> [1] a b c d #> Levels: b c d a fct_relevel(f, \"a\") #> [1] a b c d #> Levels: a b c d fct_relevel(f, \"b\", \"a\") #> [1] a b c d #> Levels: b a c d  # Move to the third position fct_relevel(f, \"a\", after = 2) #> [1] a b c d #> Levels: b c a d  # Relevel to the end fct_relevel(f, \"a\", after = Inf) #> [1] a b c d #> Levels: b c d a fct_relevel(f, \"a\", after = 3) #> [1] a b c d #> Levels: b c d a  # Relevel with a function fct_relevel(f, sort) #> [1] a b c d #> Levels: a b c d fct_relevel(f, sample) #> [1] a b c d #> Levels: d b a c fct_relevel(f, rev) #> [1] a b c d #> Levels: a d c b  # Using 'Inf' allows you to relevel to the end when the number # of levels is unknown or variable (e.g. vectorised operations) df <- forcats::gss_cat[, c(\"rincome\", \"denom\")] lapply(df, levels) #> $rincome #>  [1] \"No answer\"      \"Don't know\"     \"Refused\"        #>  [4] \"$25000 or more\" \"$20000 - 24999\" \"$15000 - 19999\" #>  [7] \"$10000 - 14999\" \"$8000 to 9999\"  \"$7000 to 7999\"  #> [10] \"$6000 to 6999\"  \"$5000 to 5999\"  \"$4000 to 4999\"  #> [13] \"$3000 to 3999\"  \"$1000 to 2999\"  \"Lt $1000\"       #> [16] \"Not applicable\" #>  #> $denom #>  [1] \"No answer\"            \"Don't know\"           #>  [3] \"No denomination\"      \"Other\"                #>  [5] \"Episcopal\"            \"Presbyterian-dk wh\"   #>  [7] \"Presbyterian, merged\" \"Other presbyterian\"   #>  [9] \"United pres ch in us\" \"Presbyterian c in us\" #> [11] \"Lutheran-dk which\"    \"Evangelical luth\"     #> [13] \"Other lutheran\"       \"Wi evan luth synod\"   #> [15] \"Lutheran-mo synod\"    \"Luth ch in america\"   #> [17] \"Am lutheran\"          \"Methodist-dk which\"   #> [19] \"Other methodist\"      \"United methodist\"     #> [21] \"Afr meth ep zion\"     \"Afr meth episcopal\"   #> [23] \"Baptist-dk which\"     \"Other baptists\"       #> [25] \"Southern baptist\"     \"Nat bapt conv usa\"    #> [27] \"Nat bapt conv of am\"  \"Am bapt ch in usa\"    #> [29] \"Am baptist asso\"      \"Not applicable\"       #>   df2 <- lapply(df, fct_relevel, \"Don't know\", after = Inf) lapply(df2, levels) #> $rincome #>  [1] \"No answer\"      \"Refused\"        \"$25000 or more\" #>  [4] \"$20000 - 24999\" \"$15000 - 19999\" \"$10000 - 14999\" #>  [7] \"$8000 to 9999\"  \"$7000 to 7999\"  \"$6000 to 6999\"  #> [10] \"$5000 to 5999\"  \"$4000 to 4999\"  \"$3000 to 3999\"  #> [13] \"$1000 to 2999\"  \"Lt $1000\"       \"Not applicable\" #> [16] \"Don't know\"     #>  #> $denom #>  [1] \"No answer\"            \"No denomination\"      #>  [3] \"Other\"                \"Episcopal\"            #>  [5] \"Presbyterian-dk wh\"   \"Presbyterian, merged\" #>  [7] \"Other presbyterian\"   \"United pres ch in us\" #>  [9] \"Presbyterian c in us\" \"Lutheran-dk which\"    #> [11] \"Evangelical luth\"     \"Other lutheran\"       #> [13] \"Wi evan luth synod\"   \"Lutheran-mo synod\"    #> [15] \"Luth ch in america\"   \"Am lutheran\"          #> [17] \"Methodist-dk which\"   \"Other methodist\"      #> [19] \"United methodist\"     \"Afr meth ep zion\"     #> [21] \"Afr meth episcopal\"   \"Baptist-dk which\"     #> [23] \"Other baptists\"       \"Southern baptist\"     #> [25] \"Nat bapt conv usa\"    \"Nat bapt conv of am\"  #> [27] \"Am bapt ch in usa\"    \"Am baptist asso\"      #> [29] \"Not applicable\"       \"Don't know\"           #>   # You'll get a warning if the levels don't exist fct_relevel(f, \"e\") #> Warning: 1 unknown level in `f`: e #> [1] a b c d #> Levels: b c d a"},{"path":"https://forcats.tidyverse.org/dev/reference/fct_reorder.html","id":null,"dir":"Reference","previous_headings":"","what":"Reorder factor levels by sorting along another variable — fct_reorder","title":"Reorder factor levels by sorting along another variable — fct_reorder","text":"fct_reorder() useful 1d displays factor mapped position; fct_reorder2() 2d displays factor mapped non-position aesthetic. last2() first2() helpers fct_reorder2(); last2() finds last value y sorted x; first2() finds first value.","code":""},{"path":"https://forcats.tidyverse.org/dev/reference/fct_reorder.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reorder factor levels by sorting along another variable — fct_reorder","text":"","code":"fct_reorder(   .f,   .x,   .fun = median,   ...,   .na_rm = NULL,   .default = Inf,   .desc = FALSE )  fct_reorder2(   .f,   .x,   .y,   .fun = last2,   ...,   .na_rm = NULL,   .default = -Inf,   .desc = TRUE )  last2(.x, .y)  first2(.x, .y)"},{"path":"https://forcats.tidyverse.org/dev/reference/fct_reorder.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reorder factor levels by sorting along another variable — fct_reorder","text":".f factor (character vector). .x, .y levels f reordered values .fun(.x) (fct_reorder()) fun(.x, .y) (fct_reorder2()) ascending order. .fun n summary function. take one vector fct_reorder, two vectors fct_reorder2, return single value. ... arguments passed .fun. .na_rm fct_reorder() remove missing values? NULL, default, remove missing values warning. Set FALSE preserve NAs (.fun already handles ) TRUE remove silently. .default default value use .fun empty levels? Use control empty levels appear output. .desc Order descending order? Note default different fct_reorder fct_reorder2, order match default ordering factors legend.","code":""},{"path":"https://forcats.tidyverse.org/dev/reference/fct_reorder.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reorder factor levels by sorting along another variable — fct_reorder","text":"","code":"# fct_reorder() ------------------------------------------------------------- # Useful when a categorical variable is mapped to position boxplot(Sepal.Width ~ Species, data = iris)  boxplot(Sepal.Width ~ fct_reorder(Species, Sepal.Width), data = iris)   # or with library(ggplot2) ggplot(iris, aes(fct_reorder(Species, Sepal.Width), Sepal.Width)) +   geom_boxplot()   # fct_reorder2() ------------------------------------------------------------- # Useful when a categorical variable is mapped to color, size, shape etc  chks <- subset(ChickWeight, as.integer(Chick) < 10) chks <- transform(chks, Chick = fct_shuffle(Chick))  # Without reordering it's hard to match line to legend ggplot(chks, aes(Time, weight, colour = Chick)) +   geom_point() +   geom_line()   # With reordering it's much easier ggplot(chks, aes(Time, weight, colour = fct_reorder2(Chick, Time, weight))) +   geom_point() +   geom_line() +   labs(colour = \"Chick\")"},{"path":"https://forcats.tidyverse.org/dev/reference/fct_rev.html","id":null,"dir":"Reference","previous_headings":"","what":"Reverse order of factor levels — fct_rev","title":"Reverse order of factor levels — fct_rev","text":"sometimes useful plotting factor.","code":""},{"path":"https://forcats.tidyverse.org/dev/reference/fct_rev.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reverse order of factor levels — fct_rev","text":"","code":"fct_rev(f)"},{"path":"https://forcats.tidyverse.org/dev/reference/fct_rev.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reverse order of factor levels — fct_rev","text":"f factor (character vector).","code":""},{"path":"https://forcats.tidyverse.org/dev/reference/fct_rev.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reverse order of factor levels — fct_rev","text":"","code":"f <- factor(c(\"a\", \"b\", \"c\")) fct_rev(f) #> [1] a b c #> Levels: c b a"},{"path":"https://forcats.tidyverse.org/dev/reference/fct_shift.html","id":null,"dir":"Reference","previous_headings":"","what":"Shift factor levels to left or right, wrapping around at end — fct_shift","title":"Shift factor levels to left or right, wrapping around at end — fct_shift","text":"useful levels ordered factor actually cyclical, different conventions starting point.","code":""},{"path":"https://forcats.tidyverse.org/dev/reference/fct_shift.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shift factor levels to left or right, wrapping around at end — fct_shift","text":"","code":"fct_shift(f, n = 1L)"},{"path":"https://forcats.tidyverse.org/dev/reference/fct_shift.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shift factor levels to left or right, wrapping around at end — fct_shift","text":"f factor. n Positive values shift left; negative values shift right.","code":""},{"path":"https://forcats.tidyverse.org/dev/reference/fct_shift.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Shift factor levels to left or right, wrapping around at end — fct_shift","text":"","code":"x <- factor(   c(\"Mon\", \"Tue\", \"Wed\"),   levels = c(\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"),   ordered = TRUE ) x #> [1] Mon Tue Wed #> Levels: Sun < Mon < Tue < Wed < Thu < Fri < Sat fct_shift(x) #> [1] Mon Tue Wed #> Levels: Mon < Tue < Wed < Thu < Fri < Sat < Sun fct_shift(x, 2) #> [1] Mon Tue Wed #> Levels: Tue < Wed < Thu < Fri < Sat < Sun < Mon fct_shift(x, -1) #> [1] Mon Tue Wed #> Levels: Sat < Sun < Mon < Tue < Wed < Thu < Fri"},{"path":"https://forcats.tidyverse.org/dev/reference/fct_shuffle.html","id":null,"dir":"Reference","previous_headings":"","what":"Randomly permute factor levels — fct_shuffle","title":"Randomly permute factor levels — fct_shuffle","text":"Randomly permute factor levels","code":""},{"path":"https://forcats.tidyverse.org/dev/reference/fct_shuffle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Randomly permute factor levels — fct_shuffle","text":"","code":"fct_shuffle(f)"},{"path":"https://forcats.tidyverse.org/dev/reference/fct_shuffle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Randomly permute factor levels — fct_shuffle","text":"f factor (character vector).","code":""},{"path":"https://forcats.tidyverse.org/dev/reference/fct_shuffle.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Randomly permute factor levels — fct_shuffle","text":"","code":"f <- factor(c(\"a\", \"b\", \"c\")) fct_shuffle(f) #> [1] a b c #> Levels: c a b fct_shuffle(f) #> [1] a b c #> Levels: c b a"},{"path":"https://forcats.tidyverse.org/dev/reference/fct_unify.html","id":null,"dir":"Reference","previous_headings":"","what":"Unify the levels in a list of factors — fct_unify","title":"Unify the levels in a list of factors — fct_unify","text":"Unify levels list factors","code":""},{"path":"https://forcats.tidyverse.org/dev/reference/fct_unify.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unify the levels in a list of factors — fct_unify","text":"","code":"fct_unify(fs, levels = lvls_union(fs))"},{"path":"https://forcats.tidyverse.org/dev/reference/fct_unify.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unify the levels in a list of factors — fct_unify","text":"fs list factors levels Set levels apply every factor. Default union factor levels","code":""},{"path":"https://forcats.tidyverse.org/dev/reference/fct_unify.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Unify the levels in a list of factors — fct_unify","text":"","code":"fs <- list(factor(\"a\"), factor(\"b\"), factor(c(\"a\", \"b\"))) fct_unify(fs) #> [[1]] #> [1] a #> Levels: a b #>  #> [[2]] #> [1] b #> Levels: a b #>  #> [[3]] #> [1] a b #> Levels: a b #>"},{"path":"https://forcats.tidyverse.org/dev/reference/fct_unique.html","id":null,"dir":"Reference","previous_headings":"","what":"Unique values of a factor, as a factor — fct_unique","title":"Unique values of a factor, as a factor — fct_unique","text":"fct_unique() extracts complete set possible values levels factor, rather looking actual values, like unique(). fct_unique() uses values f one way: looks implicit missing values can included result.","code":""},{"path":"https://forcats.tidyverse.org/dev/reference/fct_unique.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unique values of a factor, as a factor — fct_unique","text":"","code":"fct_unique(f)"},{"path":"https://forcats.tidyverse.org/dev/reference/fct_unique.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unique values of a factor, as a factor — fct_unique","text":"f factor.","code":""},{"path":"https://forcats.tidyverse.org/dev/reference/fct_unique.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Unique values of a factor, as a factor — fct_unique","text":"factor.","code":""},{"path":"https://forcats.tidyverse.org/dev/reference/fct_unique.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Unique values of a factor, as a factor — fct_unique","text":"","code":"f <- fct(letters[rpois(100, 10)]) unique(f)     # in order of appearance #>  [1] i e m l j k h g q n s o f p #> Levels: i e m l j k h g q n s o f p fct_unique(f) # in order of levels #>  [1] i e m l j k h g q n s o f p #> Levels: i e m l j k h g q n s o f p  f <- fct(letters[rpois(100, 2)], letters[1:20]) unique(f)     # levels that appear in data #> [1] b a d c e f #> Levels: a b c d e f g h i j k l m n o p q r s t fct_unique(f) # all possible levels #>  [1] a b c d e f g h i j k l m n o p q r s t #> Levels: a b c d e f g h i j k l m n o p q r s t"},{"path":"https://forcats.tidyverse.org/dev/reference/forcats-package.html","id":null,"dir":"Reference","previous_headings":"","what":"forcats: Tools for Working with Categorical Variables (Factors) — forcats-package","title":"forcats: Tools for Working with Categorical Variables (Factors) — forcats-package","text":"Helpers reordering factor levels (including moving specified levels front, ordering first appearance, reversing, randomly shuffling), tools modifying factor levels (including collapsing rare levels , 'anonymising', manually 'recoding').","code":""},{"path":[]},{"path":"https://forcats.tidyverse.org/dev/reference/forcats-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"forcats: Tools for Working with Categorical Variables (Factors) — forcats-package","text":"Maintainer: Hadley Wickham hadley@posit.co contributors: Posit Software, PBC (03wc8by49) [copyright holder, funder]","code":""},{"path":"https://forcats.tidyverse.org/dev/reference/gss_cat.html","id":null,"dir":"Reference","previous_headings":"","what":"A sample of categorical variables from the General Social survey — gss_cat","title":"A sample of categorical variables from the General Social survey — gss_cat","text":"sample categorical variables General Social survey","code":""},{"path":"https://forcats.tidyverse.org/dev/reference/gss_cat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A sample of categorical variables from the General Social survey — gss_cat","text":"","code":"gss_cat"},{"path":"https://forcats.tidyverse.org/dev/reference/gss_cat.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A sample of categorical variables from the General Social survey — gss_cat","text":"year year survey, 2000–2014 (every year) age age. Maximum age truncated 89. marital marital status race race rincome reported income partyid party affiliation relig religion denom denomination tvhours hours per day watching tv","code":""},{"path":"https://forcats.tidyverse.org/dev/reference/gss_cat.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"A sample of categorical variables from the General Social survey — gss_cat","text":"Downloaded https://gssdataexplorer.norc.org/.","code":""},{"path":"https://forcats.tidyverse.org/dev/reference/gss_cat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A sample of categorical variables from the General Social survey — gss_cat","text":"","code":"gss_cat #> # A tibble: 21,483 × 9 #>     year marital         age race  rincome  partyid relig denom tvhours #>    <int> <fct>         <int> <fct> <fct>    <fct>   <fct> <fct>   <int> #>  1  2000 Never married    26 White $8000 t… Ind,ne… Prot… Sout…      12 #>  2  2000 Divorced         48 White $8000 t… Not st… Prot… Bapt…      NA #>  3  2000 Widowed          67 White Not app… Indepe… Prot… No d…       2 #>  4  2000 Never married    39 White Not app… Ind,ne… Orth… Not …       4 #>  5  2000 Divorced         25 White Not app… Not st… None  Not …       1 #>  6  2000 Married          25 White $20000 … Strong… Prot… Sout…      NA #>  7  2000 Never married    36 White $25000 … Not st… Chri… Not …       3 #>  8  2000 Divorced         44 White $7000 t… Ind,ne… Prot… Luth…      NA #>  9  2000 Married          44 White $25000 … Not st… Prot… Other       0 #> 10  2000 Married          47 White $25000 … Strong… Prot… Sout…       3 #> # ℹ 21,473 more rows  fct_count(gss_cat$relig) #> # A tibble: 16 × 2 #>    f                           n #>    <fct>                   <int> #>  1 No answer                  93 #>  2 Don't know                 15 #>  3 Inter-nondenominational   109 #>  4 Native american            23 #>  5 Christian                 689 #>  6 Orthodox-christian         95 #>  7 Moslem/islam              104 #>  8 Other eastern              32 #>  9 Hinduism                   71 #> 10 Buddhism                  147 #> 11 Other                     224 #> 12 None                     3523 #> 13 Jewish                    388 #> 14 Catholic                 5124 #> 15 Protestant              10846 #> 16 Not applicable              0 fct_count(fct_lump(gss_cat$relig)) #> # A tibble: 2 × 2 #>   f              n #>   <fct>      <int> #> 1 Protestant 10846 #> 2 Other      10637"},{"path":"https://forcats.tidyverse.org/dev/reference/lvls.html","id":null,"dir":"Reference","previous_headings":"","what":"Low-level functions for manipulating levels — lvls","title":"Low-level functions for manipulating levels — lvls","text":"lvls_reorder leaves values , changes order. lvls_revalue changes values existing levels; must one new level old level. lvls_expand expands set levels; new levels must include old levels.","code":""},{"path":"https://forcats.tidyverse.org/dev/reference/lvls.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Low-level functions for manipulating levels — lvls","text":"","code":"lvls_reorder(f, idx, ordered = NA)  lvls_revalue(f, new_levels)  lvls_expand(f, new_levels)"},{"path":"https://forcats.tidyverse.org/dev/reference/lvls.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Low-level functions for manipulating levels — lvls","text":"f factor (character vector). idx integer index, one integer existing level. ordered logical determines \"ordered\" status output factor. NA preserves existing status factor. new_levels character vector new levels.","code":""},{"path":"https://forcats.tidyverse.org/dev/reference/lvls.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Low-level functions for manipulating levels — lvls","text":"functions less helpful higher-level fct_ functions, safer low-level manipulation levels directly, specific, hence can carefully check arguments.","code":""},{"path":"https://forcats.tidyverse.org/dev/reference/lvls.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Low-level functions for manipulating levels — lvls","text":"","code":"f <- factor(c(\"a\", \"b\", \"c\")) lvls_reorder(f, 3:1) #> [1] a b c #> Levels: c b a lvls_revalue(f, c(\"apple\", \"banana\", \"carrot\")) #> [1] apple  banana carrot #> Levels: apple banana carrot lvls_expand(f, c(\"a\", \"b\", \"c\", \"d\")) #> [1] a b c #> Levels: a b c d"},{"path":"https://forcats.tidyverse.org/dev/reference/lvls_union.html","id":null,"dir":"Reference","previous_headings":"","what":"Find all levels in a list of factors — lvls_union","title":"Find all levels in a list of factors — lvls_union","text":"Find levels list factors","code":""},{"path":"https://forcats.tidyverse.org/dev/reference/lvls_union.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find all levels in a list of factors — lvls_union","text":"","code":"lvls_union(fs)"},{"path":"https://forcats.tidyverse.org/dev/reference/lvls_union.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find all levels in a list of factors — lvls_union","text":"fs list factors.","code":""},{"path":"https://forcats.tidyverse.org/dev/reference/lvls_union.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find all levels in a list of factors — lvls_union","text":"","code":"fs <- list(factor(\"a\"), factor(\"b\"), factor(c(\"a\", \"b\"))) lvls_union(fs) #> [1] \"a\" \"b\""},{"path":"https://forcats.tidyverse.org/dev/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See %>% details.","code":""},{"path":"https://forcats.tidyverse.org/dev/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://forcats.tidyverse.org/dev/news/index.html","id":"forcats-development-version","dir":"Changelog","previous_headings":"","what":"forcats (development version)","title":"forcats (development version)","text":"forcats now requires R 4.1.","code":""},{"path":"https://forcats.tidyverse.org/dev/news/index.html","id":"forcats-100","dir":"Changelog","previous_headings":"","what":"forcats 1.0.0","title":"forcats 1.0.0","text":"CRAN release: 2023-01-29","code":""},{"path":"https://forcats.tidyverse.org/dev/news/index.html","id":"new-features-1-0-0","dir":"Changelog","previous_headings":"","what":"New features","title":"forcats 1.0.0","text":"New fct_na_value_to_level() fct_na_level_to_value() convert NA values NA levels vice versa (#337).","code":""},{"path":"https://forcats.tidyverse.org/dev/news/index.html","id":"minor-improvement-and-bug-fixes-1-0-0","dir":"Changelog","previous_headings":"","what":"Minor improvement and bug fixes","title":"forcats 1.0.0","text":"functions now validate inputs, giving useful errors accidentally misspecify input. fct_collapse() can now use other_level = NA (#291). fct_count() works factors contain NAs levels. fct_explicit_na() deprecated favour fct_na_value_to_level(). fct_expand() gains argument can choose new levels placed (#138). fct_infreq() gains ability weight another variable using w argument (#261). fct_inorder() now works levels appear data (#262). fct_lump_prop() friends now work correctly supply weights empty levels (#292). fct_lump_n() fct_lump_prop() now create “” level even consists single level. makes consistent fct_lump_* functions (#274). fct_other() longer generates warning levels replaced (#265). fct_relevel(), fct_cross(), fct_expand() now error name arguments ... since names ignored code probably doesn’t think (#319). fct_reorder() fct_reorder2() now remove NA values .x warning (like ggplot2::geom_point() friends). can suppress warning setting .na_rm = TRUE (#315). fct_reorder() fct_reorder2() gain new .default argument controls placement empty levels (including levels might become empty removing missing values .x) (#266). fct_unique() now captures implicit missing values present (#293).","code":""},{"path":"https://forcats.tidyverse.org/dev/news/index.html","id":"forcats-052","dir":"Changelog","previous_headings":"","what":"forcats 0.5.2","title":"forcats 0.5.2","text":"CRAN release: 2022-08-19 New fct() works like factor() errors values x included levels specification (#299) first2() last2() now ignore missing values x y (#303). Error messages informative.","code":""},{"path":"https://forcats.tidyverse.org/dev/news/index.html","id":"forcats-051","dir":"Changelog","previous_headings":"","what":"forcats 0.5.1","title":"forcats 0.5.1","text":"CRAN release: 2021-01-27 Re-license MIT (#277). fct_lump_n() longer uses partial argument name (@malcolmbarrett, #276).","code":""},{"path":"https://forcats.tidyverse.org/dev/news/index.html","id":"forcats-050","dir":"Changelog","previous_headings":"","what":"forcats 0.5.0","title":"forcats 0.5.0","text":"CRAN release: 2020-03-01 as_factor() gains logical method always returns factor levels “FALSE” “TRUE” (#185). fct_c(), fct_collapse() fct_recode() now explicitly documented using dynamic dots (@labouz, #234). fct_collapse() now accepts other_level argument, allow user-specified level (@gtm19, #194). now correctly collapses factors other_level NULL (#172), makes \"\" last level (#202) (@gtm19, #172 & #202) fct_count() longer converts implicit NAs explicit NAs (#151). fct_inseq() behaves robustly factor levels aren’t numbers (#221). fct_lump() split three new functions: fct_lump_prop(), fct_lump_n(), fct_lump_lowfreq(). (@jonocarroll, #167, #142). fct_lump_() functions check inputs carefully (@robinson_es, #169) fct_reorder2() gains helper function first2(), sorts .y first value .x (@jtr13).","code":""},{"path":"https://forcats.tidyverse.org/dev/news/index.html","id":"forcats-040","dir":"Changelog","previous_headings":"","what":"forcats 0.4.0","title":"forcats 0.4.0","text":"CRAN release: 2019-02-17","code":""},{"path":"https://forcats.tidyverse.org/dev/news/index.html","id":"new-features-0-4-0","dir":"Changelog","previous_headings":"","what":"New features","title":"forcats 0.4.0","text":"fct_collapse() gains group_other argument allow group un-named levels \"\". (#100, @AmeliaMN) fct_cross() creates new factor containing combined levels two input factors, similar base::interaction (@tslumley, #136) fct_inseq() reorders labels numeric order, possible (#145, @kbodwin). fct_lump_min() preserves levels appear least min times (can also used w weighted argument) (@robinsones, #142). fct_match() performs validated matching, providing safer alternative f %% c(\"x\", \"y\") silently returns FALSE \"x\" \"y\" levels f (e.g. typo) (#126, @jonocarroll). fct_relevel() can now level factors using function passed current levels (#117). as_factor() now numeric method. default, orders factors numeric order, unlike methods default order appearance. (#145, @kbodwin)","code":""},{"path":"https://forcats.tidyverse.org/dev/news/index.html","id":"minor-bug-fixes-and-improvements-0-4-0","dir":"Changelog","previous_headings":"","what":"Minor bug fixes and improvements","title":"forcats 0.4.0","text":"fct_count() gains parameter also compute proportion (@zhiiiyang, #146). fct_lump() now change label lumping occurs (@zhiiiyang, #130). fct_relabel() now accepts character input. fct_reorder() fct_reorder2() longer require summary function return numeric vector length 1; instead can return orderable vector length 1 (#147). fct_reorder(), fct_reorder2() as_factor() now use ellipsis package warn pass named components ... (#174).","code":""},{"path":"https://forcats.tidyverse.org/dev/news/index.html","id":"forcats-030","dir":"Changelog","previous_headings":"","what":"forcats 0.3.0","title":"forcats 0.3.0","text":"CRAN release: 2018-02-19","code":""},{"path":"https://forcats.tidyverse.org/dev/news/index.html","id":"api-changes-0-3-0","dir":"Changelog","previous_headings":"","what":"API changes","title":"forcats 0.3.0","text":"fct_c() now requires explicit splicing !!! list factors want combine. consistent emerging standards handling ... throughout tidyverse. fct_reorder() fct_reorder2() renamed fun .fun avoid spurious matching named arguments.","code":""},{"path":"https://forcats.tidyverse.org/dev/news/index.html","id":"new-features-0-3-0","dir":"Changelog","previous_headings":"","what":"New features","title":"forcats 0.3.0","text":"functions take ... use “tidy” dots: means use can !!! splice list values, trailing empty arguments automatically removed. Additionally, arguments gain . prefix order avoid unhelpful matching named arguments (#110). fct_lump() gains w argument (#70, @wilkox) weight value frequencies lumping together (#68).","code":""},{"path":"https://forcats.tidyverse.org/dev/news/index.html","id":"improvements-to-na-handling-0-3-0","dir":"Changelog","previous_headings":"","what":"Improvements to NA handling","title":"forcats 0.3.0","text":"as_factor() fct_inorder() accept NA levels (#98). fct_explicit_na() also replaces NAs encoded levels. fct_lump() correctly accounts NA values input (#41) lvls_revalue() preserves NA levels.","code":""},{"path":"https://forcats.tidyverse.org/dev/news/index.html","id":"minor-improvements-and-bug-fixes-0-3-0","dir":"Changelog","previous_headings":"","what":"Minor improvements and bug fixes","title":"forcats 0.3.0","text":"Test coverage increased 80% 99%. fct_drop() now preserves attributes (#83). fct_expand() lvls_expand() now also take character vectors (#99). fct_relabel() now accepts objects coercible functions rlang::as_function (#91, @alistaire47)","code":""},{"path":"https://forcats.tidyverse.org/dev/news/index.html","id":"forcats-020","dir":"Changelog","previous_headings":"","what":"forcats 0.2.0","title":"forcats 0.2.0","text":"CRAN release: 2017-01-23","code":""},{"path":"https://forcats.tidyverse.org/dev/news/index.html","id":"new-functions-0-2-0","dir":"Changelog","previous_headings":"","what":"New functions","title":"forcats 0.2.0","text":"as_factor() works like .factor() orders levels appearance avoid differences locales (#39). fct_other() makes easier convert selected levels “” (#40) fct_relabel() allows programmatic relabeling levels (#50, @krlmlr).","code":""},{"path":"https://forcats.tidyverse.org/dev/news/index.html","id":"minor-improvements-and-bug-fixes-0-2-0","dir":"Changelog","previous_headings":"","what":"Minor improvements and bug fixes","title":"forcats 0.2.0","text":"fct_c() can take either list factors individual factors (#42). fct_drop() gains argument restrict levels dropped (#69) longer adds NA level present (#52). fct_recode() now checks new value length 1 (#56). fct_relevel() gains argument can also move levels end (position like) (#29). lvls_reorder(), fct_inorder(), fct_infreq() gain ordered argument, allowing override existing “ordered” status (#54).","code":""},{"path":"https://forcats.tidyverse.org/dev/news/index.html","id":"forcats-011","dir":"Changelog","previous_headings":"","what":"forcats 0.1.1","title":"forcats 0.1.1","text":"CRAN release: 2016-09-16 Minor fixes R CMD check Add package docs","code":""}]
